import streamlit as st
from PIL import Image
import io
import cv2
import numpy as np
# import google.generativeai as genai

# --- ุฅุนุฏุงุฏุงุช ุฃูููุฉ (ูุฌุจ ุงุณุชุจุฏุงููุง) ---
# ูู ุจุฅุนุฏุงุฏ ููุชุงุญ API ุงูุฎุงุต ุจู (ููุถู ุงุณุชุฎุฏุงู st.secrets)
# genai.configure(api_key="YOUR_GOOGLE_API_KEY")

# --- ุฏูุงู ูุณุงุนุฏุฉ (ุชุญุชุงุฌ ุฅูู ุชุทุจูู ูุนูู) ---

def detect_and_blur_plate(image_bytes):
    """
    (Placeholder) ุชูุชุดู ูุชููู ููุญุฉ ุงูุชุฑุฎูุต ูู ุงูุตูุฑุฉ.
    ุชุญุชุงุฌ ูุฐู ุงูุฏุงูุฉ ุฅูู ุชุทุจูู ูุนูู ุจุงุณุชุฎุฏุงู OpenCV ููููุฐุฌ ุงูุชุดุงู ูุงุฆูุงุช.
    """
    try:
        image = Image.open(io.BytesIO(image_bytes)).convert('RGB')
        img_cv = np.array(image)
        # --- ููุทู ุงูุชุดุงู ุงูููุญุฉ (ูุซุงู ุจุณูุท ุจุงุณุชุฎุฏุงู Haar Cascade - ูุญุชุงุฌ ุชุฏุฑูุจ ุฃู ููู XML ุฌุงูุฒ) ---
        # gray = cv2.cvtColor(img_cv, cv2.COLOR_RGB2GRAY)
        # plate_cascade = cv2.CascadeClassifier('path/to/haarcascade_russian_plate_number.xml') # ุชุญุชุงุฌ ููู XML
        # plates = plate_cascade.detectMultiScale(gray, 1.1, 4)
        # for (x, y, w, h) in plates:
        #     roi = img_cv[y:y+h, x:x+w]
        #     roi = cv2.GaussianBlur(roi, (23, 23), 30) # ุชุทุจูู ุงูุชูููู
        #     img_cv[y:y+roi.shape[0], x:x+roi.shape[1]] = roi # ุฅุนุงุฏุฉ ุงูุฌุฒุก ุงููููู ููุตูุฑุฉ ุงูุฃุตููุฉ

        # --- ุญู ูุคูุช: ุชูููู ุฌุฒุก ุงูุชุฑุงุถู ูู ุงูุตูุฑุฉ ---
        h, w = img_cv.shape[:2]
        # ุชูููู ููุทูุฉ ุฃุณูู ุงููุณุท (ููุซุงู)
        blur_zone = img_cv[int(h*0.7):int(h*0.9), int(w*0.3):int(w*0.7)]
        if blur_zone.size > 0:
             blurred_roi = cv2.GaussianBlur(blur_zone, (51, 51), 30)
             img_cv[int(h*0.7):int(h*0.9), int(w*0.3):int(w*0.7)] = blurred_roi
        # --- ููุงูุฉ ุงูุญู ุงููุคูุช ---

        blurred_image_pil = Image.fromarray(img_cv)
        buf = io.BytesIO()
        blurred_image_pil.save(buf, format='PNG')
        blurred_image_bytes = buf.getvalue()
        return blurred_image_bytes
    except Exception as e:
        st.error(f"ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงูุตูุฑุฉ: {e}")
        return image_bytes # ุฅุฑุฌุงุน ุงูุตูุฑุฉ ุงูุฃุตููุฉ ูู ุญุงูุฉ ุงููุดู

def call_gemini_vision(image_bytes, text_prompt):
    """
    (Placeholder) ุชุณุชุฏุนู Gemini API ูุชุญููู ุงูุตูุฑุฉ ูุงููุต.
    ุชุญุชุงุฌ ุฅูู ุชุทุจูู ูุนูู ูุงุณุชุฏุนุงุก API.
    """
    # model = genai.GenerativeModel('gemini-pro-vision') # ุฃู ุงููููุฐุฌ ุงูุฃุญุฏุซ ุงูููุงุณุจ
    # image_parts = [{"mime_type": "image/png", "data": image_bytes}]
    # response = model.generate_content([text_prompt, image_parts])
    # return response.text
    # --- ุฑุฏ ูููู ููุชุฌุฑุจุฉ ---
    return f"""
    **ุงูุณูุงุฑุฉ ุงููุญุฏุฏุฉ:** ุชูููุชุง ูุงูุฑู 2022 (ุชูุฏูุฑู)
    **ุงูููุงุตูุงุช:** ูุญุฑู 4 ุณููุฏุฑ 2.5 ูุชุฑุ ูุงูู ุญุฑูุฉ ุฃูุชููุงุชููู 8 ุณุฑุนุงุชุ ุฏูุน ุฃูุงูู.
    **ุงููููุฒุงุช:** ููุซูููุฉ ุนุงููุฉุ ุงุณุชููุงู ูููุฏ ุฌูุฏุ ููุตูุฑุฉ ูุงุณุนุฉ.
    **ุงูุนููุจ ุงูุดุงุฆุนุฉ:** ุชุตููู ุฏุงุฎูู ูุฏูู ุจุนุถ ุงูุดูุกุ ุชุณุงุฑุน ูุชูุณุท.
    """

def call_gemini_text(text_prompt):
    """
    (Placeholder) ุชุณุชุฏุนู Gemini API ููุนุงูุฌุฉ ุงููุตูุต (ููุจุญุซ ุนู ุงูุฃุณุนุงุฑุ ุงููููุฏุ ุงูููุงุฑูุฉ).
    ุชุญุชุงุฌ ุฅูู ุชุทุจูู ูุนูู ูุงุณุชุฏุนุงุก API.
    """
    # model = genai.GenerativeModel('gemini-pro') # ุฃู ุงููููุฐุฌ ุงูุฃุญุฏุซ
    # response = model.generate_content(text_prompt)
    # return response.text
    # --- ุฑุฏูุฏ ููููุฉ ููุชุฌุฑุจุฉ ---
    if "ุณุนุฑ ุงูุณูู" in text_prompt:
        return "ูุชูุณุท ุณุนุฑ ุงูุณูู ุงูููุฏุฑ ูู ุงูุจูุฏ ุงููุญุฏุฏ: 25,000 - 28,000 ุฏููุงุฑ ุฃูุฑููู (ููุซุงู)."
    elif "ุฃุณุนุงุฑ ุงููููุฏ" in text_prompt:
        return "ุฃุณุนุงุฑ ุงููููุฏ ุงูุญุงููุฉ ูู ุงูุจูุฏ ุงููุญุฏุฏ: ุจูุฒูู 95: 1.8 ุฏููุงุฑ/ูุชุฑุ ุฏูุฒู: 1.6 ุฏููุงุฑ/ูุชุฑ (ููุซุงู)."
    elif "ูุงุฑู ุจูู" in text_prompt:
        return "ุจูุงุกู ุนูู ุงูููุงุฑูุฉุ ุงูุณูุงุฑุฉ 1 (ุชูููุชุง ูุงูุฑู) ุชุจุฏู ุฎูุงุฑูุง ุฃูุถู ููููุซูููุฉ ูุชูุงููู ุงูุชุดุบูู ุทูููุฉ ุงูุฃูุฏุ ุจูููุง ุงูุณูุงุฑุฉ 2 (ูููุฏุง ุฃููุฑุฏ) ูุฏ ุชููุฑ ุชุฌุฑุจุฉ ููุงุฏุฉ ุฑูุงุถูุฉ ุฃูุซุฑ."
    elif "ูุตูุญุชู ุจุดุฑุงุฆูุง" in text_prompt:
        return "**ุงูุชูููู: 8/10** \nุณูุงุฑุฉ ููุซููุฉ ูุงูุชุตุงุฏูุฉ ูููุงุณุจุฉ ููุงุณุชุฎุฏุงู ุงููููู. ุณุนุฑูุง ูู ุงูุณูู ูุนููู. ุงูุนููุจ ุงููุฐููุฑุฉ ููุณุช ุฌููุฑูุฉ ููุนุธู ุงููุณุชุฎุฏููู."
    else:
        return "ุงุณุชุฌุงุจุฉ ูุตูุฉ ูู Gemini (Placeholder)."


# --- ูุงุฌูุฉ ุงููุณุชุฎุฏู Streamlit ---
st.set_page_config(layout="wide", page_title="ูุณุงุนุฏ ุดุฑุงุก ุงูุณูุงุฑุงุช ุงูุฐูู")
st.title("๐ ูุณุงุนุฏ ุดุฑุงุก ุงูุณูุงุฑุงุช ุงูุฐูู")
st.markdown("ูู ุจุชุตููุฑ ุงูุณูุงุฑุงุช ุงูุชู ุชููุฑ ูู ุดุฑุงุฆูุง ููููุงุฑูุฉ ุฃู ุงูุชูููู.")

# --- ุฅุนุฏุงุฏุงุช ุนุงูุฉ (ูู ุงูุดุฑูุท ุงูุฌุงูุจู) ---
with st.sidebar:
    st.header("โ๏ธ ุงูุฅุนุฏุงุฏุงุช")
    # ูุซุงู ุจุณูุท ููุงุฆูุฉ ุงูุฏูู (ูููู ุชูุณูุนูุง)
    countries = ["ุงูููููุฉ ุงูุนุฑุจูุฉ ุงูุณุนูุฏูุฉ", "ุงูุฅูุงุฑุงุช ุงูุนุฑุจูุฉ ุงููุชุญุฏุฉ", "ูุตุฑ", "ุงูุฃุฑุฏู", "ุงููููุช", "ุฃุฎุฑู"]
    selected_country = st.selectbox("ุงุฎุชุฑ ุฏููุชู:", countries)

    st.header("๐ฆ ูุถุน ุงูุชุดุบูู")
    app_mode = st.radio("", ["๐ ููุงุฑูุฉ ุนุฏุฉ ุณูุงุฑุงุช", "โ๏ธ ุชูููู ุณูุงุฑุฉ ูุงุญุฏุฉ"])

    st.info("๐ ุณูุชู ุชูููู ููุญุงุช ุงูุชุฑุฎูุต ุชููุงุฆููุง ูุญูุงูุฉ ุงูุฎุตูุตูุฉ.")

# --- ุฅุฏุงุฑุฉ ุงูุญุงูุฉ ูุชุฎุฒูู ุงูุณูุงุฑุงุช ุงูููุงุฑูุฉ ---
if 'cars_to_compare' not in st.session_state:
    st.session_state.cars_to_compare = []

# --- ููุทู ูุถุน ุงูููุงุฑูุฉ ---
if app_mode == "๐ ููุงุฑูุฉ ุนุฏุฉ ุณูุงุฑุงุช":
    st.header("๐ ููุงุฑูุฉ ุนุฏุฉ ุณูุงุฑุงุช")
    st.write("ุฃุถู ุตูุฑ ุงูุณูุงุฑุงุช ุงูุชู ุชุฑูุฏ ููุงุฑูุชูุง:")

    uploaded_file = st.camera_input("๐ธ ุงูุชูุท ุตูุฑุฉ ูุณูุงุฑุฉ ุฌุฏูุฏุฉ ููููุงุฑูุฉ", key=f"compare_cam_{len(st.session_state.cars_to_compare)}")
    # ุฃู ุงุณุชุฎุฏู ุฑูุน ุงููููุงุช:
    # uploaded_file = st.file_uploader("ุฃู ุงุฑูุน ุตูุฑุฉ ุณูุงุฑุฉ", type=['jpg', 'png', 'jpeg'], key=f"compare_upload_{len(st.session_state.cars_to_compare)}")


    if uploaded_file is not None:
        img_bytes = uploaded_file.getvalue()
        st.image(img_bytes, caption="ุงูุตูุฑุฉ ุงูุฃุตููุฉ", width=300)

        with st.spinner("โณ ุฌุงุฑู ูุนุงูุฌุฉ ุงูุตูุฑุฉ ูุชุญููู ุงูุณูุงุฑุฉ..."):
            # 1. ุชูููู ุงูููุญุฉ
            blurred_bytes = detect_and_blur_plate(img_bytes)
            st.image(blurred_bytes, caption="ุงูุตูุฑุฉ ุงููุนุงูุฌุฉ (ุงูููุญุฉ ููููุฉ)", width=300)

            # 2. ุงุณุชุฏุนุงุก Gemini Vision ููุชุญููู
            vision_prompt = "ุญูู ูุฐู ุงูุตูุฑุฉ ูุณูุงุฑุฉ. ุญุฏุฏ ุงููุงุฑูุฉุ ุงูููุฏููุ ูุงูุณูุฉ ุงูุชูุฏูุฑูุฉ. ุงุฐูุฑ ุงูููุงุตูุงุช ุงูุฑุฆูุณูุฉ ูุงูุนููุจ ุงูุดุงุฆุนุฉ ุงููุนุฑููุฉ. ุชุฌุงูู ููุญุฉ ุงูุชุฑุฎูุต."
            car_info = call_gemini_vision(blurred_bytes, vision_prompt)

            # (ุชุญุณูู ูุณุชูุจูู: ุงุณุชุฎูุงุต ุจูุงูุงุช ููุธูุฉ ูู car_info)
            car_data = {
                "id": f"car_{len(st.session_state.cars_to_compare)}",
                "image": blurred_bytes,
                "info": car_info,
                "country": selected_country # ุญูุธ ุงูุฏููุฉ ูุน ุงูุณูุงุฑุฉ
            }
            st.session_state.cars_to_compare.append(car_data)
            st.success("โ ุชูุช ุฅุถุงูุฉ ุงูุณูุงุฑุฉ ููููุงุฑูุฉ!")
            # ุฅุนุงุฏุฉ ุชุญููู ุงููุงุฌูุฉ ูุชุญุฏูุซ ุงูุนุฑุถ ููุณุญ ุนูุตุฑ ุงูุฅุฏุฎุงู
            st.rerun()

    # ุนุฑุถ ุงูุณูุงุฑุงุช ุงููุถุงูุฉ ููููุงุฑูุฉ
    if st.session_state.cars_to_compare:
        st.subheader("ุงูุณูุงุฑุงุช ุงููุถุงูุฉ ููููุงุฑูุฉ:")
        cols = st.columns(len(st.session_state.cars_to_compare))
        for i, car in enumerate(st.session_state.cars_to_compare):
            with cols[i]:
                st.image(car["image"], caption=f"ุณูุงุฑุฉ {i+1}", use_column_width=True)
                st.markdown(car["info"])
                if st.button(f"๐๏ธ ุฅุฒุงูุฉ ุงูุณูุงุฑุฉ {i+1}", key=f"remove_{car['id']}"):
                    st.session_state.cars_to_compare.pop(i)
                    st.rerun() # ุชุญุฏูุซ ุงููุงุฌูุฉ ุจุนุฏ ุงูุฅุฒุงูุฉ

    # ุฒุฑ ุงูููุงุฑูุฉ ุงูููุงุฆู
    if len(st.session_state.cars_to_compare) >= 2:
        if st.button("โ๏ธ ูุงุฑู ูุงุฎุชุฑ ุงูุฃูุถู", key="compare_button"):
            with st.spinner(f"โณ ุฌุงุฑู ุงูุจุญุซ ุนู ุงูุฃุณุนุงุฑ ูู {selected_country} ูุฅุฌุฑุงุก ุงูููุงุฑูุฉ..."):
                # 1. ุฌูุจ ุฃุณุนุงุฑ ุงููููุฏ
                fuel_prompt = f"ูุง ูู ูุชูุณุท ุฃุณุนุงุฑ ุงููููุฏ (ุจูุฒูู ูุฏูุฒู) ุงูุญุงููุฉ ูู {selected_country}ุ"
                fuel_prices = call_gemini_text(fuel_prompt)
                st.session_state.fuel_prices = fuel_prices # ุชุฎุฒูููุง ููุนุฑุถ

                # 2. ุฌูุจ ุฃุณุนุงุฑ ุงูุณูู ููู ุณูุงุฑุฉ ูุฅุนุฏุงุฏ ูุต ุงูููุงุฑูุฉ
                comparison_input_parts = []
                for i, car in enumerate(st.session_state.cars_to_compare):
                    # (ุชุญุณูู: ุงุณุชุฎูุงุต ุงุณู ุงูุณูุงุฑุฉ ูุณูุชูุง ูู car['info'])
                    car_name_year = f"ุงูุณูุงุฑุฉ {i+1} (ุงููุณุชุฎุฑุฌุฉ ูู ุงูุชุญููู)"
                    price_prompt = f"ูุง ูู ูุชูุณุท ุณุนุฑ ุงูุณูู ูุณูุงุฑุฉ ูุซู '{car_name_year}' ูู {car['country']}ุ"
                    market_price = call_gemini_text(price_prompt)
                    car['market_price'] = market_price # ุฅุถุงูุฉ ุงูุณุนุฑ ูุจูุงูุงุช ุงูุณูุงุฑุฉ
                    comparison_input_parts.append(f"**ุงูุณูุงุฑุฉ {i+1}:**\n{car['info']}\n*ุงูุณุนุฑ ุงูููุฏุฑ:* {market_price}\n---")

                # 3. ุงุณุชุฏุนุงุก Gemini ููููุงุฑูุฉ ุงูููุงุฆูุฉ
                comparison_prompt = f"""
                ูุงุฑู ุจูู ุงูุณูุงุฑุงุช ุงูุชุงููุฉ ุจูุงุกู ุนูู ุงููุนูููุงุช ุงููุชููุฑุฉ:
                {''.join(comparison_input_parts)}

                ูุน ุงูุฃุฎุฐ ูู ุงูุงุนุชุจุงุฑ ุฃุณุนุงุฑ ุงููููุฏ ูู {selected_country}:
                {st.session_state.fuel_prices}

                ุฃู ุณูุงุฑุฉ ุชูุตุญ ุจุดุฑุงุฆูุง ูููุงุฐุงุ ุฑูุฒ ุนูู ุงูููุซูููุฉุ ุงูุชูููุฉ ุงูุฅุฌูุงููุฉ (ุดุฑุงุก + ุชุดุบูู)ุ ูุงูููุงุกูุฉ ููุงุณุชุฎุฏุงู.
                """
                final_recommendation = call_gemini_text(comparison_prompt)

                # 4. ุนุฑุถ ุงููุชุงุฆุฌ
                st.subheader("๐ ูุชูุฌุฉ ุงูููุงุฑูุฉ")
                st.info(f"**ุฃุณุนุงุฑ ุงููููุฏ ูู {selected_country}:**\n{st.session_state.fuel_prices}")

                st.markdown("**ููุฎุต ุงูุณูุงุฑุงุช ูุฃุณุนุงุฑูุง:**")
                res_cols = st.columns(len(st.session_state.cars_to_compare))
                for i, car in enumerate(st.session_state.cars_to_compare):
                     with res_cols[i]:
                         st.image(car["image"], caption=f"ุณูุงุฑุฉ {i+1}", use_column_width=True)
                         st.markdown(f"**ุงููุนูููุงุช:**\n {car['info']}")
                         st.success(f"**ุงูุณุนุฑ ุงูููุฏุฑ:**\n {car.get('market_price', 'ุบูุฑ ูุชููุฑ')}")


                st.markdown("**๐ก ุงูุชูุตูุฉ ุงูููุงุฆูุฉ ููุฐูุงุก ุงูุงุตุทูุงุนู:**")
                st.success(final_recommendation)


# --- ููุทู ูุถุน ุงูุชูููู ุงููุฑุฏู ---
elif app_mode == "โ๏ธ ุชูููู ุณูุงุฑุฉ ูุงุญุฏุฉ":
    st.header("โ๏ธ ุชูููู ุณูุงุฑุฉ ูุงุญุฏุฉ")
    st.write("ุงูุชูุท ุตูุฑุฉ ููุณูุงุฑุฉ ุงูุชู ุชุฑูุฏ ุชูููููุง:")

    uploaded_file_single = st.camera_input("๐ธ ุงูุชูุท ุตูุฑุฉ ุงูุณูุงุฑุฉ", key="single_cam")
    # ุฃู ุงุณุชุฎุฏู ุฑูุน ุงููููุงุช:
    # uploaded_file_single = st.file_uploader("ุฃู ุงุฑูุน ุตูุฑุฉ ุงูุณูุงุฑุฉ", type=['jpg', 'png', 'jpeg'], key="single_upload")


    if uploaded_file_single is not None:
        img_bytes_single = uploaded_file_single.getvalue()
        st.image(img_bytes_single, caption="ุงูุตูุฑุฉ ุงูุฃุตููุฉ", width=400)

        if st.button("๐ง ูููู ูุฐู ุงูุณูุงุฑุฉ", key="evaluate_button"):
            with st.spinner("โณ ุฌุงุฑู ุชุญููู ุงูุณูุงุฑุฉ ูุงูุจุญุซ ุนู ุงููุนูููุงุช..."):
                # 1. ุชูููู ุงูููุญุฉ
                blurred_bytes_single = detect_and_blur_plate(img_bytes_single)
                st.image(blurred_bytes_single, caption="ุงูุตูุฑุฉ ุงููุนุงูุฌุฉ (ุงูููุญุฉ ููููุฉ)", width=400)

                # 2. ุงุณุชุฏุนุงุก Gemini Vision ููุชุญููู
                vision_prompt_single = "ุญูู ูุฐู ุงูุตูุฑุฉ ูุณูุงุฑุฉ. ุญุฏุฏ ุงููุงุฑูุฉุ ุงูููุฏููุ ูุงูุณูุฉ ุงูุชูุฏูุฑูุฉ. ุงุฐูุฑ ุงูููุงุตูุงุช ุงูุฑุฆูุณูุฉ ูุงูุนููุจ ุงูุดุงุฆุนุฉ ุงููุนุฑููุฉ. ุชุฌุงูู ููุญุฉ ุงูุชุฑุฎูุต."
                car_info_single = call_gemini_vision(blurred_bytes_single, vision_prompt_single)

                # (ุชุญุณูู: ุงุณุชุฎูุงุต ุงุณู ูุณูุฉ ุงูุณูุงุฑุฉ ูู car_info_single)
                car_name_year_single = "ุงูุณูุงุฑุฉ ุงูููุฑุฏุฉ (ุงููุณุชุฎุฑุฌุฉ ูู ุงูุชุญููู)"

                # 3. ุฌูุจ ุณุนุฑ ุงูุณูู
                price_prompt_single = f"ูุง ูู ูุชูุณุท ุณุนุฑ ุงูุณูู ูุณูุงุฑุฉ ูุซู '{car_name_year_single}' ูู {selected_country}ุ"
                market_price_single = call_gemini_text(price_prompt_single)

                # 4. ุฌูุจ ุฃุณุนุงุฑ ุงููููุฏ
                fuel_prompt_single = f"ูุง ูู ูุชูุณุท ุฃุณุนุงุฑ ุงููููุฏ (ุจูุฒูู ูุฏูุฒู) ุงูุญุงููุฉ ูู {selected_country}ุ"
                fuel_prices_single = call_gemini_text(fuel_prompt_single)

                # 5. ุงุณุชุฏุนุงุก Gemini ูุชูุฏูู ุงููุตุญ ูุงูุชูููู
                advice_prompt = f"""
                ุญูู ุงูุณูุงุฑุฉ ุงูุชุงููุฉ:
                {car_info_single}

                ูุนูููุงุช ุฅุถุงููุฉ:
                - ุงูุฏููุฉ: {selected_country}
                - ูุชูุณุท ุณุนุฑ ุงูุณูู ุงูููุฏุฑ: {market_price_single}
                - ุฃุณุนุงุฑ ุงููููุฏ ุงูุญุงููุฉ: {fuel_prices_single}

                ุจูุงุกู ุนูู ูู ูุฐู ุงูุนูุงูู (ุงูููุงุตูุงุชุ ุงูุนููุจุ ุงูุณุนุฑุ ุชูููุฉ ุงููููุฏ)ุ ูุง ูุฏู ูุตูุญุชู ุจุดุฑุงุก ูุฐู ุงูุณูุงุฑุฉุ ูุฏู ุชูููููุง ูู 10 (ุญูุซ 10 ูู ุงูุฃุนูู) ูุน ุชุจุฑูุฑ ูุงุถุญ.
                """
                final_advice = call_gemini_text(advice_prompt)

                # ุนุฑุถ ุงููุชุงุฆุฌ
                st.subheader("๐ ูุชูุฌุฉ ุงูุชูููู")
                st.markdown("**ูุนูููุงุช ุงูุณูุงุฑุฉ ุงููุญููุฉ:**")
                st.write(car_info_single)
                st.info(f"**ูุชูุณุท ุณุนุฑ ุงูุณูู ูู {selected_country}:** {market_price_single}")
                st.info(f"**ุฃุณุนุงุฑ ุงููููุฏ ูู {selected_country}:** {fuel_prices_single}")
                st.success(f"**๐ก ูุตูุญุฉ ุงูุดุฑุงุก (ุงูุชูููู ูู 10):**\n{final_advice}")

# --- ุฑุณุงูุฉ ุชุฐููู ---
st.markdown("---")
st.caption("ุชู ุงูุชุทููุฑ ุจุงุณุชุฎุฏุงู Streamlit ู Python. ูุนุชูุฏ ุงูุชุญููู ุนูู Google Gemini API (ุงูุงุณุชุฏุนุงุกุงุช ุงููุนููุฉ ุบูุฑ ูุทุจูุฉ ููุง). ุชูููู ุงูููุญุฉ ูู ูุซุงู ุชูุถูุญู.") 